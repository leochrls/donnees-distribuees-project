version: "3.8"

# ============================================
# NETWORKS
# ============================================
networks:
  iot-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${HADOOP_SUBNET}

# ============================================
# VOLUMES
# ============================================
volumes:
  namenode_data:
  datanode1_data:
  datanode2_data:
  yarn_logs:
  historyserver_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  spark_master_data:
  spark_worker1_data:
  spark_worker2_data:
  spark_history_data:
  influxdb_data:
  mongodb_data:
  mysql_data:

# ============================================
# SERVICES
# ============================================
services:

  # HDFS - NAMENODE
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    hostname: namenode
    restart: unless-stopped
    ports:
      - "${HDFS_NAMENODE_HTTP_PORT}:9870"
      - "${HDFS_NAMENODE_PORT}:9000"
    environment:
      CLUSTER_NAME: ${CLUSTER_NAME}
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      CORE_CONF_hadoop_proxyuser_hue_hosts: "*"
      CORE_CONF_hadoop_proxyuser_hue_groups: "*"
      HDFS_CONF_dfs_replication: ${HDFS_REPLICATION_FACTOR}
      HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check: "false"
      HDFS_CONF_dfs_permissions_enabled: "false"
      HDFS_CONF_dfs_webhdfs_enabled: "true"
    volumes:
      - namenode_data:/hadoop/dfs/name
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # HDFS - DATANODE 1
  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    hostname: datanode1
    restart: unless-stopped
    depends_on:
      namenode:
        condition: service_healthy
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      HDFS_CONF_dfs_replication: ${HDFS_REPLICATION_FACTOR}
      HDFS_CONF_dfs_datanode_data_dir: file:///hadoop/dfs/data
    volumes:
      - datanode1_data:/hadoop/dfs/data
    networks:
      - iot-network

  # HDFS - DATANODE 2
  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    hostname: datanode2
    restart: unless-stopped
    depends_on:
      namenode:
        condition: service_healthy
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      HDFS_CONF_dfs_replication: ${HDFS_REPLICATION_FACTOR}
      HDFS_CONF_dfs_datanode_data_dir: file:///hadoop/dfs/data
    volumes:
      - datanode2_data:/hadoop/dfs/data
    networks:
      - iot-network

  # YARN - RESOURCEMANAGER
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    hostname: resourcemanager
    restart: unless-stopped
    depends_on:
      namenode:
        condition: service_healthy
    ports:
      - "${YARN_RESOURCEMANAGER_PORT}:8088"
      - "8030:8030"
      - "8031:8031"
      - "8032:8032"
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_resourcemanager_address: resourcemanager:8032
      YARN_CONF_yarn_resourcemanager_scheduler_address: resourcemanager:8030
      YARN_CONF_yarn_resourcemanager_resource__tracker_address: resourcemanager:8031
      YARN_CONF_yarn_resourcemanager_webapp_address: resourcemanager:8088
      YARN_CONF_yarn_scheduler_minimum___allocation___mb: "512"
      YARN_CONF_yarn_scheduler_maximum___allocation___mb: "4096"
      YARN_CONF_yarn_nodemanager_resource_memory___mb: ${YARN_NODEMANAGER_MEMORY_MB}
      YARN_CONF_yarn_nodemanager_resource_cpu___vcores: ${YARN_NODEMANAGER_VCORES}
      YARN_CONF_yarn_log___aggregation___enable: "true"
      YARN_CONF_yarn_log_server_url: http://historyserver:8188/applicationhistory/logs/
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/cluster"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # YARN - NODEMANAGER 1
  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager1
    hostname: nodemanager1
    restart: unless-stopped
    depends_on:
      resourcemanager:
        condition: service_healthy
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_resourcemanager_address: resourcemanager:8032
      YARN_CONF_yarn_nodemanager_aux___services: mapreduce_shuffle
      YARN_CONF_yarn_nodemanager_resource_memory___mb: ${YARN_NODEMANAGER_MEMORY_MB}
      YARN_CONF_yarn_nodemanager_resource_cpu___vcores: ${YARN_NODEMANAGER_VCORES}
      YARN_CONF_yarn_nodemanager_vmem___check___enabled: "false"
      YARN_CONF_yarn_nodemanager_pmem___check___enabled: "false"
      YARN_CONF_yarn_nodemanager_disk___health___checker_max___disk___utilization___per___disk___percentage: "95"
    networks:
      - iot-network

  # YARN - NODEMANAGER 2
  nodemanager2:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager2
    hostname: nodemanager2
    restart: unless-stopped
    depends_on:
      resourcemanager:
        condition: service_healthy
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_resourcemanager_address: resourcemanager:8032
      YARN_CONF_yarn_nodemanager_aux___services: mapreduce_shuffle
      YARN_CONF_yarn_nodemanager_resource_memory___mb: ${YARN_NODEMANAGER_MEMORY_MB}
      YARN_CONF_yarn_nodemanager_resource_cpu___vcores: ${YARN_NODEMANAGER_VCORES}
      YARN_CONF_yarn_nodemanager_vmem___check___enabled: "false"
      YARN_CONF_yarn_nodemanager_pmem___check___enabled: "false"
      YARN_CONF_yarn_nodemanager_disk___health___checker_max___disk___utilization___per___disk___percentage: "95"
    networks:
      - iot-network

  # YARN - HISTORY SERVER
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    hostname: historyserver
    restart: unless-stopped
    depends_on:
      namenode:
        condition: service_healthy
    ports:
      - "8188:8188"
    environment:
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      CORE_CONF_hadoop_http_staticuser_user: root
      YARN_CONF_yarn_timeline___service_enabled: "true"
      YARN_CONF_yarn_timeline___service_generic___application___history_enabled: "true"
      YARN_CONF_yarn_log___aggregation___enable: "true"
    volumes:
      - historyserver_data:/hadoop/yarn/timeline
    networks:
      - iot-network

  # KAFKA - ZOOKEEPER
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    hostname: zookeeper
    restart: unless-stopped
    user: root
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
      ZOOKEEPER_HEAP_OPTS: -Xmx512M -Xms512M
      ZOOKEEPER_4LW_COMMANDS_WHITELIST: "*"
      KAFKA_OPTS: -Dzookeeper.4lw.commands.whitelist=ruok,stat,srvr
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # KAFKA BROKER
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    hostname: kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"   # host
      - "9093:9093"   # interne Docker
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LISTENERS: "PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://localhost:9092,INTERNAL://kafka:9093"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_LOG_RETENTION_HOURS: ${KAFKA_LOG_RETENTION_HOURS}
      KAFKA_LOG_RETENTION_BYTES: ${KAFKA_LOG_RETENTION_BYTES}
      KAFKA_NUM_PARTITIONS: ${KAFKA_NUM_PARTITIONS}
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_METADATA_LOG_RETENTION_MS: "30000"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9093", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # APACHE SPARK
  spark-master:
    image: apache/spark:3.5.1
    container_name: spark-master
    hostname: spark-master
    restart: unless-stopped
    user: root
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "7077:7077"
      - "8080:8080"
      - "4040:4040"
    environment:
      SPARK_MASTER_HOST: 0.0.0.0
      SPARK_MASTER_PORT: 7077
      SPARK_MASTER_WEBUI_PORT: 8080
      PYSPARK_PYTHON: python3
      PYSPARK_DRIVER_PYTHON: python3
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_resourcemanager_address: resourcemanager:8032
      SPARK_DRIVER_MEMORY: 2G
      SPARK_EXECUTOR_MEMORY: 2G
      SPARK_WORKER_CORES: 2
      SPARK_LOCAL_DIRS: /tmp/spark
    volumes:
      - spark_master_data:/opt/spark/work-dir
      - ./infrastructure/spark/app:/opt/spark/app
    networks:
      - iot-network

  spark-worker-1:
    image: apache/spark:3.5.1
    container_name: spark-worker-1
    hostname: spark-worker-1
    depends_on:
      - spark-master
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    ports:
      - "8081:8081"
    environment:
      SPARK_WORKER_WEBUI_PORT: 8081
      PYSPARK_PYTHON: python3
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_resourcemanager_address: resourcemanager:8032
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
    volumes:
      - spark_worker1_data:/opt/spark/work-dir
      - ./infrastructure/spark/app:/opt/spark/app
    networks:
      - iot-network


  spark-worker-2:
    image: apache/spark:3.5.1
    container_name: spark-worker-2
    hostname: spark-worker-2
    depends_on:
      - spark-master
    command: >
      /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    ports:
      - "8082:8082"
    environment:
      SPARK_WORKER_WEBUI_PORT: 8082
      PYSPARK_PYTHON: python3
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
      YARN_CONF_yarn_resourcemanager_hostname: resourcemanager
      YARN_CONF_yarn_resourcemanager_address: resourcemanager:8032
      SPARK_WORKER_MEMORY: 2G
      SPARK_WORKER_CORES: 2
    volumes:
      - spark_worker2_data:/opt/spark/work-dir
      - ./infrastructure/spark/app:/opt/spark/app
    networks:
      - iot-network

  # INFLUXDB - Données en temps réel
  influxdb:
    image: influxdb:2.7
    container_name: influxdb
    hostname: influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_ADMIN_USER}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_ADMIN_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUXDB_TOKEN}
    volumes:
     - influxdb_data:/var/lib/influxdb2
    networks:
      - iot-network

  # MONGODB - Données processed
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    hostname: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
     - mongodb_data:/data/db
    networks:
      - iot-network

  # --- MYSQL (Données de configuration et métadonnées) ---
  mysql:
    image: mysql:8.0
    container_name: mysql
    hostname: mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    networks:
      - iot-network